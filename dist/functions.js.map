{"version":3,"file":"functions.js","mappings":"yBA4HAA,gBAAgBC,UAAU,OAnHnB,SAAaC,EAAeC,GACjC,OAAOD,EAAQC,CACjB,IAkHAH,gBAAgBC,UAAU,UA1FnB,SAAgBG,GAGrB,OAGF,SAAyBC,GACvB,MAAMC,EAAUD,EAAK,GAGfE,EAFOF,EAAKG,MAAM,GAENC,KAAIC,IACpB,MAAMC,EAA8B,CAAC,EAkBrC,OAjBAL,EAAQM,SAAQ,CAACC,EAAQC,KACvB,IAAIC,EAAQL,EAAII,GACH,eAAVC,GAAoC,gBAAVA,EAC3BA,EAAQ,EACW,gBAAVA,EACTA,GAAQ,EACW,gBAAVA,EACTA,EAAQ,CAAC,EACU,iBAAVA,EACTA,EAAQ,GACW,gBAAVA,EACTA,EAAQ,GACEC,MAAMD,KAChBA,EAAQE,OAAOF,IAEjBJ,EAAIE,GAAUE,CAAK,IAEdJ,CAAG,IAGZ,OAAOO,KAAKC,UAAUZ,EACxB,CA9BSa,CAFMhB,EAAMiB,OAAOC,MAAM,MACbb,KAAIC,GAAOA,EAAIY,MAAM,OAE1C,IAuFAtB,gBAAgBC,UAAU,SAnDnB,SAAesB,GACpB,MAAMC,EAAQC,aAAY,KACxB,MAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EAAK,GACzB,KAEHH,EAAWO,WAAa,KACtBC,cAAcP,EAAM,CAExB,IA2CAxB,gBAAgBC,UAAU,aA3BnB,SAAmB+B,EAAqBT,GAC7C,IAAIU,EAAS,EACb,MAAMT,EAAQC,aAAY,KACxBQ,GAAUD,EACVT,EAAWM,UAAUI,EAAO,GAC3B,KAEHV,EAAWO,WAAa,KACtBC,cAAcP,EAAM,CAExB,IAkBAxB,gBAAgBC,UAAU,OAVnB,SAAoBiC,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,G","sources":["webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n// /**\n//  * convert data to Json\n//  * @customfunction\n//  * @param headers Json element name\n//  * @param datas Json element value\n//  * @returns {string} The Json of the data.\n//  */\n// export function tojson(headers: string, datas: string): string {\n//   const objects = getJsonArrayFromData(headers, datas);\n//   const json = JSON.stringify(objects);\n//   if (json.length < 50000) {\n//     return json;\n//   }\n//   return json;\n// }\n\n/**\n * convert data to Json\n * @customfunction\n * @param datas element value\n * @returns {string} The Json of the data.\n */\nexport function tojson(datas: string): string {\n  const rows = datas.trim().split('\\n');\n  const array = rows.map(row => row.split(','));\n  return dataArrayToJson(array);\n}\n\nfunction dataArrayToJson(data: any[][]): string {\n  const headers = data[0];\n  const rows = data.slice(1);\n  \n  const json = rows.map(row => {\n    const obj: { [key: string]: any } = {};\n    headers.forEach((header, index) => {\n      let value = row[index];\n      if(value === \"NoData_Int\" || value === \"NoData_Enum\") {\n        value = 0;\n      } else if (value === \"NoData_Bool\") {\n        value = false;\n      } else if (value === \"NoData_Json\") {\n        value = {};\n      } else if (value === \"NoData_Array\") {\n        value = [];\n      } else if (value === \"NoData_Text\") {\n        value = \"\";\n      } else if (!isNaN(value)) { // Convert numeric strings to numbers\n        value = Number(value);\n      }\n      obj[header] = value;\n    });\n    return obj;\n  });\n\n  return JSON.stringify(json);\n}\n\n/**\n * Displays the current time once a second.\n * @customfunction\n * @param invocation Custom function handler\n */\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time.\n * @returns String with the current time formatted for the current locale.\n */\nexport function currentTime(): string {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(incrementBy: number, invocation: CustomFunctions.StreamingInvocation<number>): void {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"TOJSON\", tojson);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);"],"names":["CustomFunctions","associate","first","second","datas","data","headers","json","slice","map","row","obj","forEach","header","index","value","isNaN","Number","JSON","stringify","dataArrayToJson","trim","split","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","result","message","console","log"],"sourceRoot":""}